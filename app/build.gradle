/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.0.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.9'
    id 'org.beryx.jlink' version '2.24.0'
    
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven {
        name = "MBARI"
        url = uri("https://maven.pkg.github.com/mbari-org/maven")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USER")
            password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        }
    }
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.1'

    // This dependency is used by the application.
    implementation 'ch.qos.logback:logback-classic:1.3.0-alpha4'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.18'
    implementation 'org.mbari.vcr4j:vcr4j-sharktopoda:4.4.1.jre11'
    implementation 'org.mbari.vcr4j:vcr4j-sharktopoda-client:4.4.1.jre11'
    implementation 'org.slf4j:slf4j-api:2.0.0-alpha1'
}

javafx {
    version = "15.0.1"
    modules = [ 'javafx.controls' ]
}


application {
    // Define the main class for the application.
    mainClass = 'org.mbari.App'
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher{
        name = 'Kassogtha'
        jvmArgs = ['-Dlog4j.configurationFile=./log4j2.xml']
    }
    jpackage {
        def customInstallerOptions = [
                "--app-version", project.version,
                "--copyright", "Monterey Bay Aquarium Research Institute 2020",
                "--name", "Kassogtha",
                "--vendor", "org.mbari"
        ]
        def os = org.gradle.internal.os.OperatingSystem.current()
        if (os.isLinux()) {
            customInstallerOptions.addAll([
                "--linux-package-name", "Kassogtha"
            ])
        }
        else if (os.isWindows()) {
            customInstallerOptions.addAll([
                "--win-upgrade-uuid", "2afa1e7b-9c54-5007-accb-637b61826967",
                "--win-menu-group", "VARS",
                "--win-menu"
            ])
        }
        else if (os.isMacOsX()) {
            customInstallerOptions.addAll([
                "--mac-package-name", "Kassogtha",
                "--mac-package-identifier", "org.mbari.Kassogtha"
            ])

            /*
                This is usually something like "Developer ID Application: My Awsome Org (0AB1C234D5)". The codesigner app uses the 
                whole name, includeing "Developer ID Application", but jpackage only wants the section AFTER that. This section of
                code handles either case and munges if needed to a jpackage friendly form.
             */
            def user = System.getenv("MAC_CODE_SIGNER")
            def marker = "Developer ID Application:"
            if (user.startsWith(marker)) {
                user = user.substring(marker.length() + 1)
            }
            if (user) {
                def homeDir = System.getenv("HOME")
                customInstallerOptions.addAll([
                    "--mac-sign",
                    "--mac-signing-key-user-name", user,
                    "--mac-signing-keychain", "$homeDir/Library/Keychains/login.keychain-db"
                ])
            }
        }
        installerOptions = customInstallerOptions
    }
}
